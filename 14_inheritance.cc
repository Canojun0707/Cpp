
#include <iostream>

using std::cout;
using std::endl;

/**
 * 
 *  > 상속 ( inheritance )
 * 
 *  - 기존 클래스를 활용하여 새로운 클래스를 생성하는 방법
 *  - 새로운 클래스는 기존 클래스의 데이터와 행동(함수)를 포함
 *  - 기존 클래스를 재사용 가능하게 함
 *  - 코드의 중복을 줄이고 유지보수를 용이하게 함 
 * 
 *  - 기본 클래스 : 상속의 대상이 되는 클래스 (부모 클래스)
 *  - 유도 클래스 : 기본 클래스로부터 생성되는 클래스 (자식 클래스)
 * 
 *  > Public 상속
 * 
 *  - 가장 흔히 사용되는 상속 방식
 *  - private와 protected는 타언어에서 지원되지 않는 경우가 많음.
 * 
 * 
 *  > 상속에서의 생성자
 * 
 *  - 유도 클래스는 기본 클래스의 멤버를 포함하므로,
 *    유도 클래스가 초기화 되기 이전에 기본 클래스에서
 *    상속된 부분이 반드시 초기화 되어야 함.
 *  - 유도 클래스 객체가 생성될 때 -> 기본 클래스의 생성자가 호출되고, 그 이후 유도 클래스의 생성자가 호출됨.
 * 
 *  > 상속에서의 소멸자
 * 
 *  - 소멸자는 생성자와 반대 순서로 호출됨.
 *  - 즉, 유도 클래스가 소멸될 때 -> 유도 클래스의 소멸자가 호출되고, 그 이후 기본 클래스의 소멸자가 호출됨.
 * 
 * 
 * 
 */
class Animal 
{
  public:
    void eat() {
        cout << "Eating..." << endl;
    }
};

// 자식 클래스 (Derived class)
class Dog : public Animal 
{   // Animal을 상속받음
  public:
    void bark() {
        cout << "Woof! Woof!" << endl;
    }
};

int main() {
    Dog d;
    d.eat();   // Animal 클래스의 메서드 사용 가능
    d.bark();  // Dog 클래스의 메서드
}